[Date: 16-Oct]

Record writing: 
	Syntax
	Parameters
	Description

Functions:
	1. sample() 
		Description:
		Provides the generic function sample and the S4 method to take a sample of the specified size from the elements of x using either with or without replacement. sample can be used to sample from a set of transactions or associations.

		Usage:
		sample(x, size, replace = FALSE, prob = NULL, ...)
		
		Arguments:
		x	
		object to be sampled from (a set of associations or transactions).
		size	
		sample size.
		replace	
		a logical. Sample with replacement?
		prob	
		a numeric vector of probability weights.
		...	
		further arguments.
		
	2. knn() 
		Description

		k-nearest neighbour classification for test set from training set. For each row of the test set, the k nearest (in Euclidean distance) training set vectors are found, and the classification is decided by majority vote, with ties broken at random. If there are ties for the kth nearest vector, all candidates are included in the vote.

		Usage

		knn(train, test, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)
		Arguments

		train	
		matrix or data frame of training set cases.
		test	
		matrix or data frame of test set cases. A vector will be interpreted as a row vector for a single case.
		cl	
		factor of true classifications of training set
		k	
		number of neighbours considered.
		l	
		minimum vote for definite decision, otherwise doubt. (More precisely, less than k-l dissenting votes are allowed, even if k is increased by ties.)
		prob	
		If this is true, the proportion of the votes for the winning class are returned as attribute prob.
		use.all	
		controls handling of ties. If true, all distances equal to the kth largest are included. If false, a random selection of distances equal to the kth is chosen to use exactly k neighbours
		
	3. lm() 
		Description

		lm is used to fit linear models. It can be used to carry out regression, single stratum analysis of variance and analysis of covariance (although aov may provide a more convenient interface for these).

		Usage

		lm(formula, data, subset, weights, na.action,
		   method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
		   singular.ok = TRUE, contrasts = NULL, offset, ...)
		Arguments

		formula	
		an object of class "formula" (or one that can be coerced to that class): a symbolic description of the model to be fitted. The details of model specification are given under ‘Details’.
		data	
		an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model. If not found in data, the variables are taken from environment(formula), typically the environment from which lm is called.
		subset	
		an optional vector specifying a subset of observations to be used in the fitting process.
		weights	
		an optional vector of weights to be used in the fitting process. Should be NULL or a numeric vector. If non-NULL, weighted least squares is used with weights weights (that is, minimizing sum(w*e^2)); otherwise ordinary least squares is used. See also ‘Details’,
		na.action	
		a function which indicates what should happen when the data contain NAs. The default is set by the na.action setting of options, and is na.fail if that is unset. The ‘factory-fresh’ default is na.omit. Another possible value is NULL, no action. Value na.exclude can be useful.
		method	
		the method to be used; for fitting, currently only method = "qr" is supported; method = "model.frame" returns the model frame (the same as with model = TRUE, see below).
		model, x, y, qr	
		logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.
		singular.ok	
		logical. If FALSE (the default in S but not in R) a singular fit is an error.
		contrasts	
		an optional list. See the contrasts.arg of model.matrix.default.
		offset	
		this can be used to specify an a priori known component to be included in the linear predictor during fitting. This should be NULL or a numeric vector of length equal to the number of cases. One or more offset terms can be included in the formula instead or as well, and if more than one are specified their sum is used. See model.offset.
		...	
		additional arguments to be passed to the low level regression fitting functions (see below).
	
	4. glm()
		Description

		glm is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution.

		Usage

		glm(formula, family = gaussian, data, weights, subset,
			na.action, start = NULL, etastart, mustart, offset,
			control = list(...), model = TRUE, method = "glm.fit",
			x = FALSE, y = TRUE, contrasts = NULL, ...)

		glm.fit(x, y, weights = rep(1, nobs),
				start = NULL, etastart = NULL, mustart = NULL,
				offset = rep(0, nobs), family = gaussian(),
				control = list(), intercept = TRUE)

		## S3 method for class 'glm'
		weights(object, type = c("prior", "working"), ...)
		Arguments

		formula	
		an object of class "formula" (or one that can be coerced to that class): a symbolic description of the model to be fitted. The details of model specification are given under ‘Details’.
		family	
		a description of the error distribution and link function to be used in the model. For glm this can be a character string naming a family function, a family function or the result of a call to a family function. For glm.fit only the third option is supported. (See family for details of family functions.)
		data	
		an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model. If not found in data, the variables are taken from environment(formula), typically the environment from which glm is called.
		weights	
		an optional vector of ‘prior weights’ to be used in the fitting process. Should be NULL or a numeric vector.
		subset	
		an optional vector specifying a subset of observations to be used in the fitting process.
		na.action	
		a function which indicates what should happen when the data contain NAs. The default is set by the na.action setting of options, and is na.fail if that is unset. The ‘factory-fresh’ default is na.omit. Another possible value is NULL, no action. Value na.exclude can be useful.
		start	
		starting values for the parameters in the linear predictor.
		etastart	
		starting values for the linear predictor.
		mustart	
		starting values for the vector of means.
		offset	
		this can be used to specify an a priori known component to be included in the linear predictor during fitting. This should be NULL or a numeric vector of length equal to the number of cases. One or more offset terms can be included in the formula instead or as well, and if more than one is specified their sum is used. See model.offset.
		control	
		a list of parameters for controlling the fitting process. For glm.fit this is passed to glm.control.
		model	
		a logical value indicating whether model frame should be included as a component of the returned value.
		method	
		the method to be used in fitting the model. The default method "glm.fit" uses iteratively reweighted least squares (IWLS): the alternative "model.frame" returns the model frame and does no fitting.
		User-supplied fitting functions can be supplied either as a function or a character string naming a function, with a function which takes the same arguments as glm.fit. If specified as a character string it is looked up from within the stats namespace.
		x, y	
		For glm: logical values indicating whether the response vector and model matrix used in the fitting process should be returned as components of the returned value.
		For glm.fit: x is a design matrix of dimension n * p, and y is a vector of observations of length n.
		contrasts	
		an optional list. See the contrasts.arg of model.matrix.default.
		intercept	
		logical. Should an intercept be included in the null model?
		object	
		an object inheriting from class "glm".
		type	
		character, partial matching allowed. Type of weights to extract from the fitted model object. Can be abbreviated.
		...	
		For glm: arguments to be used to form the default control argument if it is not supplied directly.
		For weights: further arguments passed to or from other methods.
	
	5. predict.lm()
		Description

		Predicted values based on linear model object.

		Usage

		## S3 method for class 'lm'
		predict(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,
				interval = c("none", "confidence", "prediction"),
				level = 0.95, type = c("response", "terms"),
				terms = NULL, na.action = na.pass,
				pred.var = res.var/weights, weights = 1, ...)
		Arguments

		object	
		Object of class inheriting from "lm"
		newdata	
		An optional data frame in which to look for variables with which to predict. If omitted, the fitted values are used.
		se.fit	
		A switch indicating if standard errors are required.
		scale	
		Scale parameter for std.err. calculation.
		df	
		Degrees of freedom for scale.
		interval	
		Type of interval calculation. Can be abbreviated.
		level	
		Tolerance/confidence level.
		type	
		Type of prediction (response or model term). Can be abbreviated.
		terms	
		If type = "terms", which terms (default is all terms), a character vector.
		na.action	
		function determining what should be done with missing values in newdata. The default is to predict NA.
		pred.var	
		the variance(s) for future observations to be assumed for prediction intervals. See ‘Details’.
		weights	
		variance weights for prediction. This can be a numeric vector or a one-sided model formula. In the latter case, it is interpreted as an expression evaluated in newdata.
		...	
		further arguments passed to or from other methods.
		
	6. rpart() 
		Description

		Fit a rpart model

		Usage

		rpart(formula, data, weights, subset, na.action = na.rpart, method,
			  model = FALSE, x = FALSE, y = TRUE, parms, control, cost, ...)
		Arguments

		formula	
		a formula, with a response but no interaction terms. If this a a data frame, that is taken as the model frame (see model.frame).
		data	
		an optional data frame in which to interpret the variables named in the formula.
		weights	
		optional case weights.
		subset	
		optional expression saying that only a subset of the rows of the data should be used in the fit.
		na.action	
		the default action deletes all observations for which y is missing, but keeps those in which one or more predictors are missing.
		method	
		one of "anova", "poisson", "class" or "exp". If method is missing then the routine tries to make an intelligent guess. If y is a survival object, then method = "exp" is assumed, if y has 2 columns then method = "poisson" is assumed, if y is a factor then method = "class" is assumed, otherwise method = "anova" is assumed. It is wisest to specify the method directly, especially as more criteria may added to the function in future.
		Alternatively, method can be a list of functions named init, split and eval. Examples are given in the file ‘tests/usersplits.R’ in the sources, and in the vignettes ‘User Written Split Functions’.
		model	
		if logical: keep a copy of the model frame in the result? If the input value for model is a model frame (likely from an earlier call to the rpart function), then this frame is used rather than constructing new data.
		x	
		keep a copy of the x matrix in the result.
		y	
		keep a copy of the dependent variable in the result. If missing and model is supplied this defaults to FALSE.
		parms	
		optional parameters for the splitting function.
		Anova splitting has no parameters.
		Poisson splitting has a single parameter, the coefficient of variation of the prior distribution on the rates. The default value is 1.
		Exponential splitting has the same parameter as Poisson.
		For classification splitting, the list can contain any of: the vector of prior probabilities (component prior), the loss matrix (component loss) or the splitting index (component split). The priors must be positive and sum to 1. The loss matrix must have zeros on the diagonal and positive off-diagonal elements. The splitting index can be gini or information. The default priors are proportional to the data counts, the losses default to 1, and the split defaults to gini.
		control	
		a list of options that control details of the rpart algorithm. See rpart.control.
		cost	
		a vector of non-negative costs, one for each variable in the model. Defaults to one for all variables. These are scalings to be applied when considering splits, so the improvement on splitting on a variable is divided by its cost in deciding which split to choose.
		...	
		arguments to rpart.control may also be specified in the call to rpart. They are checked against the list of valid arguments.
	
	7. kmeans() 
		Description

		Perform k-means clustering on a data matrix.

		Usage

		kmeans(x, centers, iter.max = 10, nstart = 1,
			   algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
							 "MacQueen"), trace=FALSE)
		## S3 method for class 'kmeans'
		fitted(object, method = c("centers", "classes"), ...)
		Arguments

		x	
		numeric matrix of data, or an object that can be coerced to such a matrix (such as a numeric vector or a data frame with all numeric columns).
		centers	
		either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
		iter.max	
		the maximum number of iterations allowed.
		nstart	
		if centers is a number, how many random sets should be chosen?
		algorithm	
		character: may be abbreviated. Note that "Lloyd" and "Forgy" are alternative names for one algorithm.
		object	
		an R object of class "kmeans", typically the result ob of ob <- kmeans(..).
		method	
		character: may be abbreviated. "centers" causes fitted to return cluster centers (one for each input point) and "classes" causes fitted to return a vector of class assignments.
		trace	
		logical or integer number, currently only used in the default method ("Hartigan-Wong"): if positive (or true), tracing information on the progress of the algorithm is produced. Higher values may produce more tracing information.
		...	
		not used.